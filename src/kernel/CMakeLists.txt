CMAKE_MINIMUM_REQUIRED(VERSION 3.13)

FUNCTION(LOAD_PROFILE ARCH)
    INCLUDE(arch/${ARCH}/flags.cmake)
    SET(KERNEL_ARCH_SOURCES ${KERNEL_ARCH_SOURCES} PARENT_SCOPE)
    SET(KERNEL_ARCH_LINKER ${KERNEL_ARCH_LINKER} PARENT_SCOPE)
    SET(KERNEL_ARCH_PROLOGUE_SOURCES ${KERNEL_ARCH_PROLOGUE_SOURCES} PARENT_SCOPE)
    SET(KERNEL_ARCH_EPILOGUE_SOURCES ${KERNEL_ARCH_EPILOGUE_SOURCES} PARENT_SCOPE)
ENDFUNCTION(LOAD_PROFILE ARCH)

LOAD_PROFILE(${ARCH})

FILE(GLOB KERNEL_SOURCES *.cpp *.c *.s)

# define a kernel library
ADD_LIBRARY(
        kernel
        ${KERNEL_ARCH_PROLOGUE_SOURCES}
        ${KERNEL_SOURCES}
        ${KERNEL_ARCH_SOURCES}
        ${KERNEL_ARCH_EPILOGUE_SOURCES}
)
# specify ifdef indicating that kernel code is being compiled
TARGET_COMPILE_DEFINITIONS(kernel PRIVATE kernel)
# link the kernel against the libc-kernel library
TARGET_LINK_LIBRARIES(kernel libc-kernel)

# create executable that depends on above library
ADD_EXECUTABLE(kernel-bin $<TARGET_OBJECTS:kernel>)
TARGET_LINK_LIBRARIES(kernel-bin kernel)

# unfortunately TARGET_COMPILE_OPTIONS apples to assemblers as well.
# this is the alternative.
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffreestanding")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffreestanding")
# set linker flags that can't be set in more user-friendly ways.
SET(LINK_FLAGS "${LINK_FLAGS} -nostdlib -lgcc -T ${KERNEL_ARCH_LINKER}")
# fetch object files (crtbegin/crtend) generated by gcc
EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} --print-file-name=crtbegin.o OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE CRTBEGIN)
EXECUTE_PROCESS(COMMAND ${CMAKE_C_COMPILER} --print-file-name=crtend.o OUTPUT_STRIP_TRAILING_WHITESPACE OUTPUT_VARIABLE CRTEND)
# attempt (as best as we can) to define linker order.
# it looks like the order for crti.s/crtbegin.o and crtn.s/crtend.o are reversed
# but things appear to work, and i couldn't find a way to fix it so i'll leave it as is.
SET(CMAKE_C_LINK_EXECUTABLE "${CMAKE_C_COMPILER} ${CMAKE_C_LINK_FLAGS} ${LINK_FLAGS} ${CRTBEGIN} <OBJECTS> ${CRTEND} <LINK_LIBRARIES>  -o <TARGET>")
SET(CMAKE_CXX_LINK_EXECUTABLE "${CMAKE_C_COMPILER} ${CMAKE_C_LINK_FLAGS} ${LINK_FLAGS} ${CRTBEGIN} <OBJECTS> ${CRTEND} <LINK_LIBRARIES> -o <TARGET>")
